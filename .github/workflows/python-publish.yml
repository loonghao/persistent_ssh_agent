name: Upload Python Package

permissions:
  # IMPORTANT: these permissions are mandatory for publishing and creating releases
  id-token: write     # Required for PyPI trusted publishing
  contents: write     # Required for creating releases
  packages: write     # Required for publishing packages
  actions: read       # Required for workflow access
  issues: write       # Required for creating issues if needed

on:
  push:
    tags:
      - "v*"
  repository_dispatch:
    types: [trigger-python-publish]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: these permissions are mandatory for publishing and creating releases
      id-token: write     # Required for PyPI trusted publishing
      contents: write     # Required for creating releases
      packages: write     # Required for publishing packages
      actions: read       # Required for workflow access
      issues: write       # Required for creating issues if needed

    steps:
    # This step is kept for backward compatibility
    - name: Set tag variable
      id: set_tag
      run: |
        if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
          echo "TAG=v${{ github.event.client_payload.version }}" >> $GITHUB_ENV
          echo "Using version from repository_dispatch: ${{ github.event.client_payload.version }}"
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "Using version from tag: ${GITHUB_REF#refs/tags/v}"
        fi

    - name: Debug variables
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Client payload version: ${{ github.event.client_payload.version }}"
        echo "VERSION env: ${{ env.VERSION }}"
        echo "TAG env: ${{ env.TAG }}"
        echo "GITHUB_REF: ${{ github.ref }}"

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ github.token }}
        fetch-depth: 0  # Fetch all history for tags and branches
    - uses: olegtarasov/get-tag@v2.1.4
      id: get_tag_name
      with:
        tagRegex: "v(?<version>.*)"


    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install -r requirements-dev.txt
        poetry --version
        poetry build
    # Note that we don't need credentials.
    # We rely on https://docs.pypi.org/trusted-publishers/.
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist
        skip-existing: true
        verbose: true

    - name: Generate changelog
      id: changelog
      uses: jaywcjlove/changelog-generator@main
      with:
        token: ${{ github.token }}
        filter-author: (|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
        filter: '[R|r]elease[d]\s+[v|V]\d(\.\d+){0,2}'
        template: |
          ## Bugs
          {{fix}}
          ## Feature
          {{feat}}
          ## Improve
          {{refactor,perf,clean}}
          ## Misc
          {{chore,style,ci||ðŸ”¶ Nothing change}}
          ## Unknown
          {{__unknown__}}

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/*"
        token: ${{ github.token }}
        tag: ${{ env.TAG || steps.get_tag_name.outputs.tag }}
        name: "Release ${{ env.TAG || steps.get_tag_name.outputs.tag }}"
        allowUpdates: true
        body: |
          Comparing Changes: ${{ steps.changelog.outputs.compareurl }}

          ${{ steps.changelog.outputs.changelog }}
